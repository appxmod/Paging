

//    if(false) {
//        api libs_glide
//        annotationProcessor libs_glide
//    } else {
//        //compileOnly "com.google.auto.service:auto-service:1.0-rc6"
//        //compileOnly "com.squareup:javapoet:1.10.0"
//        compileOnly project(path: ':GlideModule:annotation:compiler')
//        annotationProcessor project(path: ':GlideModule:annotation:compiler')
//        api project(path: ':GlideModule:glide')
//        //implementation 'com.knziha.glidemodule:GlideModule:1.0@aar'
//    }


dependencies {





    api('com.github.appxmod.GlideModule:GlideModule:1.0.0.03')
    api('com.github.appxmod.GlideModule:GifDecoder:1.0.0.03')
    api('com.github.appxmod.GlideModule:DiskLruCache:1.0.0.03')
    api libs_pref

    compileOnly ('com.github.appxmod.GlideModule:Compiler:1.0.0.03')
    annotationProcessor ('com.github.appxmod.GlideModule:Compiler:1.0.0.03')

    implementation('com.github.appxmod.GlideModule:Annotation:1.0.0.03')

    //compileOnly("com.google.auto.service:auto-service:1.0-rc6")
    annotationProcessor ("com.google.auto.service:auto-service:1.0-rc6") 



}



afterEvaluate {
    gradle.buildFinished{ BuildResult buildResult ->
        if (buildResult.failure) {
            ['powershell', """(New-Object Media.SoundPlayer "D:\\Downloads\\music\\error.wav").PlaySync();"""].execute()
            println("failed doing task")
        } else {
            ['powershell', """(New-Object Media.SoundPlayer "D:\\Downloads\\music\\muse_SchivoNo.2.wav").PlaySync();"""].execute()
            println("build finished")
        }
    }
}